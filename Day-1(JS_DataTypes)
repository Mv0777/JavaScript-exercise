// 1.JavaScript variables can hold different data types: numbers, strings, objects and more:

let length = 16;                               // Number
let lastName = "Johnson";                      // String
let x = {firstName:"John", lastName:"Doe"};    // Object

// 2.JavaScript evaluates expressions from left to right. Different sequences can produce different results:


let x = 16 + 4 + "Volvo";
20Volvo
let x = "Volvo" + 16 + 4;
Volvo164
// 3.JavaScript has dynamic types. This means that the same variable can be used to hold different data types:

//Example
let x;           // Now x is undefined
x = 5;           // Now x is a Number
x = "John";      // Now x is a String
// 4.You can use quotes inside a string, as long as they don't match the quotes surrounding the string:

//Example
let answer1 = "It's alright";             // Single quote inside double quotes
let answer2 = "He is called 'Johnny'";    // Single quotes inside double quotes
let answer3 = 'He is called "Johnny"';    // Double quotes inside single quotes

// 5.Numbers can be written with, or without decimals:

Example
let x1 = 34.00;     // Written with decimals
let x2 = 34;        // Written without decimals

// 6.Extra large or extra small numbers can be written with scientific (exponential) notation:

//Example
let y = 123e5;      // 12300000
let z = 123e-5;     // 0.00123
 // 7.Booleans can only have two values: true or false.

Example
let x = 5;
let y = 5;
let z = 6;
(x == y)       // Returns true
(x == z)       // Returns false
//Booleans are often used in conditional testing.


// 8.JavaScript Arrays
//JavaScript arrays are written with square brackets.

//Array items are separated by commas.

//The following code declares (creates) an array called cars, containing three items (car names):

//Example
const cars = ["Saab", "Volvo", "BMW"];
//Array indexes are zero-based, which means the first item is [0], second is [1], and so on.
//9.JavaScript Objects
//JavaScript objects are written with curly braces {}.

//Object properties are written as name:value pairs, separated by commas.

//Example
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
//The object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.

// 10.The typeof Operator
//You can use the JavaScript typeof operator to find the type of a JavaScript variable.

//The typeof operator returns the type of a variable or an expression:

//Example
typeof ""             // Returns "string"
typeof "John"         // Returns "string"
typeof "John Doe"     // Returns "string"
//Example
typeof 0              // Returns "number"
typeof 314            // Returns "number"
typeof 3.14           // Returns "number"
typeof (3)            // Returns "number"
typeof (3 + 4)        // Returns "number"
 // 11.Undefined
//In JavaScript, a variable without a value, has the value undefined. The type is also undefined.

//Example
let car;    // Value is undefined, type is undefined
//Any variable can be emptied, by setting the value to undefined. The type will also be undefined.

//Example
car = undefined;    // Value is undefined, type is undefined
// 12.Empty Values
//An empty value has nothing to do with undefined.

//An empty string has both a legal value and a type.

//Example
let car = "";    // The value is "", the typeof is "string





